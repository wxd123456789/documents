===
二叉查找树BST（Binary Search Tree）：
1.左子树上所有结点的值均小于或等于它的根结点的值。
2.右子树上所有结点的值均大于或等于它的根结点的值。
3.左、右子树也分别为二叉排序树。


红黑树：
1.节点是红色或黑色。
2.根节点是黑色。
3.每个叶子节点都是黑色的空节点（NIL节点）。
4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)
5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。
应用：查询效率高，Java集合中的TreeSet和TreeMap，java8中的HashMap，Linux虚拟内存的管理。
红黑树的基本操作是添加、删除。对红黑树进行添加或删除之后，都会用到旋转方法（左旋右旋），使这颗树重新成为红黑树。


平衡二叉树（AVL树）：
带有平衡条件的二叉查找树，平衡条件必须满足所有节点的左右子树高度差的绝对值不超过1。
不管执行插入还是删除操作，只要不满足上面的条件，就要通过旋转来保持平衡，而旋转是非常耗时的，由此我们可以知道AVL树适合用于插入与删除次数比较少，但查找多对查找要求高的场景。




===
红黑树：https://zhuanlan.zhihu.com/p/31805309